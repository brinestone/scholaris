// Code generated by the Encore v1.44.2 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-scholaris-xnz2.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

/**
 * Client is an API client for the scholaris-xnz2 Encore application.
 */
export default class Client {
    public readonly auth: auth.ServiceClient
    public readonly billing: billing.ServiceClient
    public readonly forms: forms.ServiceClient
    public readonly institutions: institutions.ServiceClient
    public readonly settings: settings.ServiceClient
    public readonly tenants: tenants.ServiceClient
    public readonly users: users.ServiceClient


    /**
     * @deprecated This constructor is deprecated, and you should move to using BaseURL with an Options object
     */
    constructor(target: string, token?: string)

    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions)
    constructor(target: string | BaseURL = "prod", options?: string | ClientOptions) {

        // Convert the old constructor parameters to a BaseURL object and a ClientOptions object
        if (!target.startsWith("http://") && !target.startsWith("https://")) {
            target = Environment(target)
        }

        if (typeof options === "string") {
            options = { auth: options }
        }

        const base = new BaseClient(target, options ?? {})
        this.auth = new auth.ServiceClient(base)
        this.billing = new billing.ServiceClient(base)
        this.forms = new forms.ServiceClient(base)
        this.institutions = new institutions.ServiceClient(base)
        this.settings = new settings.ServiceClient(base)
        this.tenants = new tenants.ServiceClient(base)
        this.users = new users.ServiceClient(base)
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the auth token to be used for each request
     * either by passing in a static token string or by passing in a function
     * which returns the auth token.
     *
     * These tokens will be sent as bearer tokens in the Authorization header.
     */
    auth?: string | AuthDataGenerator
}

export namespace auth {
    export interface LoginResponse {
        /**
         * The user's access token
         */
        accessToken: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * Deletes a user's account.
         */
        public async DeleteAccount(params: dto.DeleteAccountRequest): Promise<void> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-captcha": params.CaptchaToken,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                password: params.password,
            }

            await this.baseClient.callAPI("POST", `/auth/delete`, JSON.stringify(body), {headers})
        }

        /**
         * Signs in an existing user using their email and password
         */
        public async SignIn(params: dto.LoginRequest): Promise<LoginResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("POST", `/auth/sign-in`, JSON.stringify(params))
            return await resp.json() as LoginResponse
        }

        /**
         * Creates a new user account
         */
        public async SignUp(params: dto.NewUserRequest): Promise<void> {
            await this.baseClient.callAPI("POST", `/auth/sign-up`, JSON.stringify(params))
        }
    }
}

export namespace billing {
    export interface MakePaymentResponse {
        VerificationToken: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * Get transaction token
         */
        public async MakePayment(): Promise<MakePaymentResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("POST", `/billing/pay`)
            return await resp.json() as MakePaymentResponse
        }
    }
}

export namespace forms {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * Creates a response for a form
         */
        public async CreateFormResponse(form: number): Promise<dto.UserFormResponses> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("POST", `/forms/${encodeURIComponent(form)}/responses/new`)
            return await resp.json() as dto.UserFormResponses
        }

        /**
         * Add a question to a form
         */
        public async CreateQuestion(form: number, params: dto.UpdateFormQuestionRequest): Promise<dto.GetFormQuestionsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("POST", `/forms/${encodeURIComponent(form)}/question`, JSON.stringify(params))
            return await resp.json() as dto.GetFormQuestionsResponse
        }

        /**
         * Creates a form's question group
         */
        public async CreateQuestionGroup(form: number, params: dto.UpdateFormQuestionGroupRequest): Promise<dto.GetFormQuestionsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("POST", `/forms/${encodeURIComponent(form)}/groups`, JSON.stringify(params))
            return await resp.json() as dto.GetFormQuestionsResponse
        }

        /**
         * Deletes a form
         */
        public async DeleteForm(form: number): Promise<void> {
            await this.baseClient.callAPI("DELETE", `/forms/${encodeURIComponent(form)}`)
        }

        /**
         * Deletes a form's questions
         */
        public async DeleteFormQuestions(form: number, params: dto.DeleteQuestionsRequest): Promise<dto.GetFormQuestionsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                questions: params.questions.map((v) => String(v)),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("DELETE", `/forms/${encodeURIComponent(form)}/questions`, undefined, {query})
            return await resp.json() as dto.GetFormQuestionsResponse
        }

        /**
         * Deletes a form's question group
         */
        public async DeleteQuestionGroup(form: number, params: dto.DeleteFormQuestionGroupsRequest): Promise<dto.GetFormQuestionsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                ids: params.ids.map((v) => String(v)),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("DELETE", `/forms/${encodeURIComponent(form)}/groups`, undefined, {query})
            return await resp.json() as dto.GetFormQuestionsResponse
        }

        /**
         * Gets an owner's form data
         */
        public async FindFormQuestions(id: number): Promise<dto.GetFormQuestionsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/forms/${encodeURIComponent(id)}/questions`)
            return await resp.json() as dto.GetFormQuestionsResponse
        }

        /**
         * Gets forms of an owner
         */
        public async FindForms(params: dto.FindFormsRequest): Promise<dto.GetFormsResponse> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-owner":      String(params.Owner),
                "x-owner-type": params.OwnerType,
            })

            const query = makeRecord<string, string | string[]>({
                page: String(params.Page),
                size: String(params.Size),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/forms`, undefined, {headers, query})
            return await resp.json() as dto.GetFormsResponse
        }

        /**
         * Gets a form's info
         */
        public async GetFormInfo(form: number): Promise<dto.FormConfig> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/forms/${encodeURIComponent(form)}`)
            return await resp.json() as dto.FormConfig
        }

        /**
         * Gets a user's response
         */
        public async GetUserResponse(form: number, response: number): Promise<dto.UserFormResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/forms/${encodeURIComponent(form)}/responses/${encodeURIComponent(response)}`)
            return await resp.json() as dto.UserFormResponse
        }

        /**
         * Gets a user's form responses
         */
        public async GetUserResponses(form: number): Promise<dto.UserFormResponses> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/forms/${encodeURIComponent(form)}/responses`)
            return await resp.json() as dto.UserFormResponses
        }

        /**
         * Creates a new form
         */
        public async NewForm(params: dto.NewFormInput): Promise<dto.NewFormResponse> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-owner":      String(params.Owner),
                "x-owner-type": params.OwnerType,
                "x-ver-token":  params.CaptchaToken,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                backgroundColor: params.backgroundColor,
                backgroundImage: params.backgroundImage,
                description:     params.description,
                image:           params.image,
                maxResponses:    params.maxResponses,
                maxSubmissions:  params.maxSubmissions,
                multiResponse:   params.multiResponse,
                repsonseWindow:  params.repsonseWindow,
                responseStart:   params.responseStart,
                resubmission:    params.resubmission,
                tags:            params.tags,
                title:           params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("POST", `/forms`, JSON.stringify(body), {headers})
            return await resp.json() as dto.NewFormResponse
        }

        /**
         * Submits a user's response
         */
        public async SubmitResponse(form: number, response: number): Promise<dto.UserFormResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("PATCH", `/forms/${encodeURIComponent(form)}/responses/${encodeURIComponent(response)}/submit`)
            return await resp.json() as dto.UserFormResponse
        }

        /**
         * Toggles a form's status
         */
        public async ToggleFormStatus(form: number): Promise<dto.FormConfig> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("PUT", `/forms/${encodeURIComponent(form)}/toggle`)
            return await resp.json() as dto.FormConfig
        }

        /**
         * Update a form
         */
        public async UpdateForm(id: number, params: dto.UpdateFormRequest): Promise<dto.FormConfig> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-ver-token": params.CaptchaToken,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                backgroundColor: params.backgroundColor,
                backgroundImage: params.backgroundImage,
                deadline:        params.deadline,
                description:     params.description,
                image:           params.image,
                maxResponses:    params.maxResponses,
                maxSubmissions:  params.maxSubmissions,
                multiResponse:   params.multiResponse,
                responseStart:   params.responseStart,
                responseWindow:  params.responseWindow,
                resubmission:    params.resubmission,
                title:           params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("PUT", `/forms/${encodeURIComponent(id)}`, JSON.stringify(body), {headers})
            return await resp.json() as dto.FormConfig
        }

        /**
         * Updates a form question's options
         */
        public async UpdateFormQuestionOptions(form: number, question: number, params: dto.UpdateFormQuestionOptionsRequest): Promise<dto.GetFormQuestionsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("PATCH", `/forms/${encodeURIComponent(form)}/questions/${encodeURIComponent(question)}/options`, JSON.stringify(params))
            return await resp.json() as dto.GetFormQuestionsResponse
        }

        /**
         * Updates a form question
         */
        public async UpdateQuestion(form: number, question: number, params: dto.UpdateFormQuestionRequest): Promise<dto.GetFormQuestionsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("PATCH", `/forms/${encodeURIComponent(form)}/questions/${encodeURIComponent(question)}`, JSON.stringify(params))
            return await resp.json() as dto.GetFormQuestionsResponse
        }

        /**
         * Updates a form's question group
         */
        public async UpdateQuestionGroup(form: number, group: number, params: dto.UpdateFormQuestionGroupRequest): Promise<dto.GetFormQuestionsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("PATCH", `/forms/${encodeURIComponent(form)}/groups/${encodeURIComponent(group)}`, JSON.stringify(params))
            return await resp.json() as dto.GetFormQuestionsResponse
        }

        /**
         * Updates a user's answers
         */
        public async UpdateResponseAnswers(form: number, response: number, params: dto.UpdateUserAnswersRequest): Promise<dto.UserFormResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("PATCH", `/forms/${encodeURIComponent(form)}/responses/${encodeURIComponent(response)}/answers`, JSON.stringify(params))
            return await resp.json() as dto.UserFormResponse
        }
    }
}

export namespace institutions {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * Manually creates an academic year
         */
        public async CreateAcademicYear(params: dto.NewAcademicYearRequest): Promise<void> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-institution": String(params.Institution),
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                startOffset:   params.startOffset,
                termDurations: params.termDurations,
                vacations:     params.vacations,
            }

            await this.baseClient.callAPI("POST", `/academic-years/new`, JSON.stringify(body), {headers})
        }

        /**
         * Get Academic years
         */
        public async GetAcademicYears(params: dto.GetAcademicYearsRequest): Promise<dto.GetAcademicYearsResponse> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-institution": String(params.Institution),
            })

            const query = makeRecord<string, string | string[]>({
                page: params.Page === undefined ? undefined : String(params.Page),
                size: params.Size === undefined ? undefined : String(params.Size),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("POST", `/academic-years`, undefined, {headers, query})
            return await resp.json() as dto.GetAcademicYearsResponse
        }

        /**
         * Gets more information for an institution
         */
        public async GetInstitution(identifier: string): Promise<dto.Institution> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/institutions/${encodeURIComponent(identifier)}`)
            return await resp.json() as dto.Institution
        }

        /**
         * Looks up institutions
         */
        public async Lookup(params: dto.PageBasedPaginationParams): Promise<dto.LookupInstitutionsResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                page: String(params.page),
                size: String(params.size),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/institutions`, undefined, {query})
            return await resp.json() as dto.LookupInstitutionsResponse
        }

        /**
         * Creates an enrollment
         */
        public async NewEnrollment(params: dto.NewEnrollmentRequest): Promise<void> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-owner":               String(params.Destination),
                "x-service-transaction": params.ServiceTransactionToken,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                captcha: params.captcha,
                level:   params.level,
            }

            await this.baseClient.callAPI("POST", `/institutions/enroll`, JSON.stringify(body), {headers})
        }

        /**
         * Creates an enrollment form
         */
        public async NewEnrollmentForm(params: dto.NewEnrollmentFormRequest): Promise<void> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-owner": String(params.Institution),
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                captcha: params.captcha,
            }

            await this.baseClient.callAPI("POST", `/institutions/enrollment-forms`, JSON.stringify(body), {headers})
        }

        /**
         * Creates a new institution
         */
        public async NewInstitution(params: dto.NewInstitutionRequest): Promise<dto.InstitutionLookup> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-timestamp": String(params.Timestamp),
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                captcha:     params.captcha,
                description: params.description,
                logo:        params.logo,
                name:        params.name,
                slug:        params.slug,
                tenantId:    params.tenantId,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("POST", `/institutions`, JSON.stringify(body), {headers})
            return await resp.json() as dto.InstitutionLookup
        }
    }
}

export namespace settings {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * Gets an owner's settings
         */
        public async FindSettings(params: dto.GetSettingsRequest): Promise<dto.GetSettingsResponse> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-owner":      String(params.Owner),
                "x-owner-type": params.OwnerType,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/settings`, undefined, {headers})
            return await resp.json() as dto.GetSettingsResponse
        }

        /**
         * Public API for updating setting values.
         */
        public async SetSettingValues(params: dto.SetSettingValueRequest): Promise<void> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-owner":      String(params.Owner),
                "x-owner-type": params.OwnerType,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                updates: params.updates,
            }

            await this.baseClient.callAPI("PUT", `/settings/set`, JSON.stringify(body), {headers})
        }

        /**
         * Updates settings (public API)
         */
        public async UpdateSettings(params: dto.UpdateSettingsRequest): Promise<void> {
            // Convert our params into the objects we need for the request
            const headers = makeRecord<string, string>({
                "x-owner":      String(params.Owner),
                "x-owner-type": params.OwnerType,
                "x-ver-token":  params.CaptchaToken,
            })

            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                deletes: params.deletes,
                updates: params.updates,
            }

            await this.baseClient.callAPI("POST", `/settings`, JSON.stringify(body), {headers})
        }
    }
}

export namespace tenants {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * Deletes a Tenant
         */
        public async DeleteTenant(id: number): Promise<void> {
            await this.baseClient.callAPI("DELETE", `/tenants/${encodeURIComponent(id)}`)
        }

        /**
         * Finds Subscription plans
         */
        public async FindSubscriptionPlans(): Promise<dto.FindSubscriptionPlansResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/subscription-plans`)
            return await resp.json() as dto.FindSubscriptionPlansResponse
        }

        /**
         * Finds a tenant using its ID
         */
        public async FindTenant(id: number): Promise<dto.TenantLookup> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/tenants/${encodeURIComponent(id)}`)
            return await resp.json() as dto.TenantLookup
        }

        /**
         * Find all Tenants
         */
        public async Lookup(params: dto.PageBasedPaginationParams): Promise<dto.FindTenantResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                page: String(params.page),
                size: String(params.size),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/tenants`, undefined, {query})
            return await resp.json() as dto.FindTenantResponse
        }

        /**
         * Creates a new Tenant
         */
        public async NewTenant(params: dto.NewTenantRequest): Promise<dto.TenantLookup> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("POST", `/tenants`, JSON.stringify(params))
            return await resp.json() as dto.TenantLookup
        }
    }
}

export namespace users {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * Fetches a paginated set of Users
         */
        public async FetchUsers(params: dto.CursorBasedPaginationParams): Promise<dto.FetchUsersResponse> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                after: String(params.After),
                size:  String(params.Size),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callAPI("GET", `/users`, undefined, {query})
            return await resp.json() as dto.FetchUsersResponse
        }

        /**
         * Uploads a user's profile photo
         */
        public async UploadProfilePhoto(method: string, id: string, body?: BodyInit, options?: CallParameters): Promise<Response> {
            return this.baseClient.callAPI(method, `/avatars/${encodeURIComponent(id)}`, body, options)
        }
    }
}

export namespace dto {
    export interface AcademicTerm {
        id: number
        academicYear: number
        startDate: string
        createdAt: string
        duration: time.Duration
        endDate: string
        label: string
        updatedAt: string
    }

    export interface AcademicYear {
        id: number
        institution: number
        startDate: string
        duration: time.Duration
        endDate: string
        label: string
        createdAt: string
        updatedAt: string
        academicTerms: AcademicTerm[]
    }

    export interface CursorBasedPaginationParams {
        After: number
        Size: number
    }

    export interface DeleteAccountRequest {
        CaptchaToken: string
        password: string
    }

    export interface DeleteFormQuestionGroupsRequest {
        ids: number[]
    }

    export interface DeleteQuestionsRequest {
        questions: number[]
    }

    export interface FetchUsersResponse {
        users: User[]
    }

    export interface FindFormsRequest {
        Page: number
        Size: number
        Owner: number
        OwnerType: string
    }

    export interface FindSubscriptionPlansResponse {
        plans: SubscriptionPlan[]
    }

    export interface FindTenantResponse {
        tenants: TenantLookup[]
    }

    export interface FormAnswer {
        id: number
        question: number
        value?: string
        answeredAt: string
        updatedAt: string
        response: number
    }

    export interface FormAnswerUpdate {
        question: number
        value?: string
    }

    /**
     * A form's current configuration.
     */
    export interface FormConfig {
        /**
         * The form's ID
         */
        id: number

        /**
         * The form's title
         */
        title: string

        /**
         * A short description of the form
         */
        description?: string

        /**
         * A background color of the form
         */
        backgroundColor?: string

        /**
         * The status of the form. Possible values are: **draft**, **published**. When published, the form is visible to everyone.
         */
        status: string

        /**
         * A background image URL of the form
         */
        backgroundImage?: string

        /**
         * An image URL for the form.
         */
        image?: string

        /**
         * Whether a user can make multiple responses of the form.
         */
        multiResponse: boolean

        /**
         * Whether a user can re-submit their a response to the form.
         */
        resubmission: boolean

        /**
         * The form's creation date.
         */
        createdAt: string

        /**
         * The form's last modified date.
         */
        updatedAt: string

        /**
         * An optional deadline for all response submissions of the form.
         */
        deadline?: string

        /**
         * The maximum number of responses a user can make for the form.
         */
        maxResponses?: number

        /**
         * The maxiumum number of submissions a user can make for the form.
         */
        maxSubmissions?: number

        /**
         * Tags attached to the form
         */
        tags: string[]

        groupIds: number[]
        questionIds: number[]
        responseStart?: string
        responseWindow?: time.Duration
    }

    export interface FormQuestion {
        id: number
        prompt: string
        type: string
        isRequired: boolean
        layoutVariant?: string
        options?: QuestionOption[]
        group?: number
    }

    export interface FormQuestionGroup {
        id: number
        label?: string
        form: number
        description: string
        image: string
    }

    export interface FormQuestionOptionUpdate {
        id: number
        caption: string
        value?: string
        image: string
        isDefault: boolean
    }

    export type Gender = string

    export interface GetAcademicYearsRequest {
        Institution: number
        Page?: number
        Size?: number
    }

    export interface GetAcademicYearsResponse {
        academicYears: AcademicYear[]
    }

    export interface GetFormQuestionsResponse {
        questions: FormQuestion[]
        groups: FormQuestionGroup[]
    }

    export interface GetFormsResponse {
        forms: FormConfig[]
    }

    export interface GetSettingsRequest {
        Owner: number
        OwnerType: string
    }

    export interface GetSettingsResponse {
        settings: { [key: string]: Setting }
    }

    export interface Institution {
        name: string
        description?: string
        logo?: string
        visible: boolean
        slug: string
        id?: number
        createdAt: string
        updatedAt: string
        isMember: boolean
        verified: boolean
        members: number
    }

    export interface InstitutionLookup {
        name: string
        description?: string
        logo?: string
        visible: boolean
        slug: string
        id?: number
        createdAt: string
        updatedAt: string
        verified: boolean
        isMember: boolean
    }

    export interface LoginRequest {
        /**
         * The user's email address
         */
        email: string

        /**
         * The user's plaintext password
         */
        password: string

        /**
         * The reCaptcha token for the site
         */
        captchaToken: string
    }

    export interface LookupInstitutionsResponse {
        institutions: InstitutionLookup[]
    }

    /**
     * Data for creation of an academic year.
     */
    export interface NewAcademicYearRequest {
        /**
         * The institution owning the academic year.
         */
        Institution: number

        /**
         * The time between the creation and official launching of the academic year being created.
         */
        startOffset: time.Duration

        /**
         * The durations of break periods in the academic year being created.
         */
        vacations: time.Duration[]

        /**
         * The durations of the terms of the academic year being created.
         */
        termDurations: time.Duration[]
    }

    export interface NewEnrollmentFormRequest {
        Institution: number
        captcha: string
    }

    export interface NewEnrollmentRequest {
        Destination: number
        ServiceTransactionToken: string
        level: number
        captcha: string
    }

    export interface NewFormInput {
        title: string
        description?: string
        backgroundColor?: string
        backgroundImage?: string
        image?: string
        multiResponse: boolean
        resubmission: boolean
        CaptchaToken: string
        Owner: number
        OwnerType: string
        repsonseWindow?: time.Duration
        responseStart?: string
        maxResponses: number
        maxSubmissions: number
        tags?: string[]
    }

    export interface NewFormResponse {
        id: number
    }

    export interface NewInstitutionRequest {
        /**
         * The institution's name
         */
        name: string

        /**
         * The institution's description (optional)
         */
        description?: string

        /**
         * The institution's logo (optional)
         */
        logo?: string

        /**
         * The institution's slug
         */
        slug: string

        /**
         * The institution's tenant ID
         */
        tenantId: number

        /**
         * The request's captcha token
         */
        captcha: string

        /**
         * The timestamp of the request
         */
        Timestamp: string
    }

    export interface NewQuestionOption {
        caption: string
        value?: string
        isDefault: boolean
        image?: string
    }

    export interface NewTenantRequest {
        name: string
        subscriptionPlan?: number
        captchaToken: string
    }

    export interface NewUserRequest {
        /**
         * The user's first name
         */
        firstName: string

        /**
         * The user's last name (optional)
         */
        lastName?: string

        /**
         * The user's email address
         */
        email: string

        /**
         * The user's date of birth (YYYY/MM/DD)
         */
        dob: string

        /**
         * The user's plaintext password
         */
        password: string

        /**
         * Password verification
         */
        confirmPassword: string

        /**
         * The user's phone number in IE64 format
         */
        phone?: string

        /**
         * The user's gender
         */
        gender?: Gender

        /**
         * The captcha token for the request
         */
        captchaToken: string
    }

    export interface PageBasedPaginationParams {
        page: number
        size: number
    }

    export interface QuestionOption {
        id: number
        caption: string
        value?: string
        image?: string
        isDefault: boolean
    }

    export interface SetSettingValueRequest {
        Owner: number
        OwnerType: string
        updates: SettingValueUpdate[]
    }

    export interface SetValue {
        value?: string
        id?: number
    }

    export interface Setting {
        id: number
        label: string
        description?: string
        key: string
        multiValues: boolean
        systemGenerated: boolean
        createdAt: string
        updatedAt: string
        owner: number
        ownerType: string
        overridable: boolean
        createdBy: number
        options: SettingOption[]
        values: SettingValue[]
        parent?: number
    }

    export interface SettingOption {
        id: number
        label: string
        value: string
        setting: number
    }

    export interface SettingOptionUpdate {
        label: string
        value?: string
        /**
         * !The key of the setting
         */
        key?: string
    }

    export interface SettingUpdate {
        key: string
        label: string
        description?: string
        multiValues: boolean
        /**
         * SystemGenerated bool                  `json:"systemGenerated"`
         */
        parent?: number

        options?: SettingOptionUpdate[]
        overrridable: boolean
    }

    export interface SettingValue {
        id: number
        setting: number
        setAt?: string
        setBy: number
        value?: string
        index: number
    }

    export interface SettingValueUpdate {
        key: string
        value?: SetValue[]
    }

    export interface SubscriptionPlan {
        id: number
        name: string
        createdAt: string
        updatedAt: string
        price?: number
        currency?: string
        enabled: boolean
        billingCycle: number
        benefits: SubscriptionPlanBenefit[]
    }

    export interface SubscriptionPlanBenefit {
        name: string
        details?: string
        minCount?: number
        maxCount?: number
    }

    export interface TenantLookup {
        name: string
        id: number
        createdAt: string
        updatedAt: string
    }

    export interface UpdateFormQuestionGroupRequest {
        label?: string
        description?: string
        image?: string
    }

    export interface UpdateFormQuestionOptionsRequest {
        removed: number[]
        added: NewQuestionOption[]
        updates: FormQuestionOptionUpdate[]
    }

    export interface UpdateFormQuestionRequest {
        prompt: string
        isRequired: boolean
        type: string
        layoutVariant: string
        group?: number
    }

    export interface UpdateFormRequest {
        title?: string
        description?: string
        backgroundColor?: string
        backgroundImage?: string
        image?: string
        multiResponse: boolean
        resubmission: boolean
        CaptchaToken: string
        deadline?: string
        maxResponses?: number
        maxSubmissions?: number
        responseStart: string
        responseWindow?: time.Duration
    }

    export interface UpdateSettingsRequest {
        OwnerType: string
        CaptchaToken: string
        Owner: number
        updates: SettingUpdate[]
        deletes?: string[]
    }

    export interface UpdateUserAnswersRequest {
        removed?: number[]
        updated?: FormAnswerUpdate[]
    }

    export interface User {
        id: number
        firstName: string
        lastName?: string
        email: string
        dob: string
        phone: string
        createdAt: string
        updatedAt: string
        gender: Gender
        avatar?: string
    }

    export interface UserFormResponse {
        id: number
        responder: number
        createdAt: string
        updatedAt: string
        submittedAt?: string
        answers?: FormAnswer[]
    }

    export interface UserFormResponses {
        responses: UserFormResponse[]
    }
}

export namespace time {
    /**
     * A Duration represents the elapsed time between two instants
     * as an int64 nanosecond count. The representation limits the
     * largest representable duration to approximately 290 years.
     */
    export type Duration = number
}



function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "method" | "body" | "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | string
  | Promise<string | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {
            "Content-Type": "application/json",
        }

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (typeof window === "undefined") {
            this.headers["User-Agent"] = "scholaris-xnz2-Generated-TS-Client (Encore/v1.44.2)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: string | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = {};
            data.headers["Authorization"] = "Bearer " + authData;

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(method: string, path: string, body?: BodyInit, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
            method,
            body: body ?? null,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}


        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}
